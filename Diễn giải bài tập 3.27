Chương trình này tính toán chi phí thấp nhất để đi qua tất cả các điểm (node) trong một đồ thị và quay lại điểm bắt đầu. Nó sử dụng phương pháp gọi là hoán vị và một cách tiếp cận "tham lam". Đồ thị này có 5 điểm, được đánh số từ 0 đến 4. Biến graph chứa thông tin về chi phí di chuyển giữa hai điểm.

Phân tích chi tiết
1. Biểu diễn đồ thị
int graph[5][5] = {
    {0, 48, 43, 54, 31},
    {20, 0, 30, 63, 22},
    {29, 64, 0, 4, 7},
    {6, 19, 2, 0, 8},
    {1, 28, 9, 18, 0}
};


Đây là một bảng (mảng) để biểu diễn chi phí di chuyển giữa các điểm. Ví dụ:
- Chi phí từ điểm 0 đến 1 là 48.
- Chi phí từ điểm 1 quay lại điểm 0 là 20.

2. Hàm hoán đổi (swap)
void swap(int *x, int *y){
    int temp;
    temp = *x;
    *x = *y;
    *y = temp;
}


Hàm này đổi chỗ giá trị của hai biến. Nó được sử dụng khi tạo các hoán vị (các thứ tự khác nhau) của các điểm.
3. Tính và ghi lại chi phí (copy_array)
void copy_array(int *a, int n){
    int i, sum = 0;
    for (i = 0; i <= n; i++) {
        sum += graph[a[i % 5]][a[(i + 1) % 5]];
    }
    if (cost > sum) {
        cost = sum;
    }
}


- Hàm này tính tổng chi phí đi lại dựa trên một thứ tự ghé thăm các điểm cụ thể.
- Nếu tổng chi phí (sum) nhỏ hơn chi phí nhỏ nhất hiện tại (cost), chương trình sẽ cập nhật giá trị cost.

4. Hàm tạo hoán vị (permute)
void permute(int *a, int i, int n){
    int j;
    if (i == n) {
        copy_array(a, n);
    } else {
        for (j = i; j <= n; j++) {
            swap((a + i), (a + j));
            permute(a, i + 1, n);
            swap((a + i), (a + j));
        }
    }
}


Hàm này tạo ra tất cả các thứ tự có thể để ghé thăm các điểm. Mỗi thứ tự sẽ được kiểm tra chi phí trong hàm copy_array.
5. Hàm chính (main)
int main() {
    system("cls"); // Xóa màn hình (giúp dễ đọc kết quả khi chạy).
    int a[] = {0, 1, 2, 3, 4}; // Các điểm cần ghé thăm.
    permute(a, 0, 4); // Bắt đầu quá trình hoán vị.
    cout << "Min cost = " << cost << endl; // In ra chi phí thấp nhất.
    cin.get(); // Chờ người dùng nhấn phím trước khi kết thúc.
    return 0;
}


Trong chương trình:
- Mảng a[] chứa các điểm (node) cần ghé thăm.
- Các thứ tự ghé thăm khác nhau sẽ được kiểm tra bằng cách sử dụng hàm permute.
- Sau đó, chi phí nhỏ nhất được hiển thị lên màn hình.


Giải thích đơn giản
Hãy tưởng tượng bạn có 5 nơi muốn ghé thăm và bạn cần tìm cách rẻ nhất để đi qua tất cả rồi quay lại điểm bắt đầu. Chương trình này thử tất cả các thứ tự đi lại và tính tổng chi phí cho mỗi thứ tự. Sau khi kiểm tra hết, chương trình sẽ tìm ra chi phí thấp nhất và hiển thị kết quả.
